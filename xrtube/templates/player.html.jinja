<video-js id=player controls playsinline poster="{{proxy(video.poster.url)}}">
    {% if video.manifest_url %}
        <source title="{{video.title}}" src="{{proxy(video.manifest_url)}}">
    {% endif %}
</video-js>

{# Putting these attrs on <video-js> causes duplicate triggering #}
<div
    hx-get="{{get_related}}"
    hx-trigger=load
    hx-select=#explore-column
    hx-target=#explore-column
></div>

<script>
    while (videojs.getAllPlayers().length) {
        videojs("player").dispose()
    }
    (() => {
        const player = videojs("player", {
            fill: true,
            liveui: true,
            playbackRates: [3, 2.5, 2, 1.75, 1.5, 1.25, 1, 0.75, 0.5],
            experimentalSvgIcons: true,
            vhs: {
                useBandwidthFromLocalStorage: true,
                useDevicePixelRatio: true,
                overrideNative: true,
            },
            nativeAudioTracks: false,
            nativeVideoTracks: false
        })
        // Requires disabling native HLS as done above
        player.hlsQualitySelector({
            displayCurrentQuality: true,
            placementIndex: 12,
        })

        const loop = player.getChild("ControlBar").addChild("button", {
            controlText: "Loop",
            className: "vjs-loop-control",
            clickHandler: event => {
                player.loop(! player.loop())
            },
        }, 2)
        loop.setIcon("repeat")

        loop.update = () => {
            console.log("up", player.loop())
            if (player.loop()) {
                loop.controlText("Stop looping")
                loop.addClass("active")
            } else {
                loop.controlText("Loop")
                loop.removeClass("active")
            }
        }
        player.one("loadstart", loop.update)
        loop.observer = new MutationObserver(loop.update)
        const vid = document.getElementsByTagName("video")[0]
        loop.observer.observe(vid, {attributes: true})
    })()
</script>
